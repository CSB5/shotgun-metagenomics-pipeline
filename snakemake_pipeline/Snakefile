# shell environment used for each job
# note, this is a naked shell, not aware of your bashrc!
shell.executable("/bin/bash")
# unofficial bash strict mode
shell.prefix("set -euo pipefail;")# don't forget trailing semicolon

# snakemake depends on py3k
# either use /mnt/software/unstowable/anaconda3 + env or
# /mnt/projects/rpd/apps.testing/miniconda3/envs/snakemake-3.7.1/bin/snakemake
#
# SM=/mnt/projects/rpd/apps.testing/miniconda3/envs/snakemake-3.7.1/bin/snakemake
# $SM --dryrun --configfile conf.yaml -p -T  
# later: -j 10 --drmaa ' -pe OpenMP {threads} -l ...'

import os
import glob

## generate a config file using script "create_config.sh"
##configfile: "conf.yaml"

assert 'SAMPLES' in config
assert 'TOOLS' in config
assert 'DBS' in config
assert 'PROFILERS' in config

## profilers to run
methods=[]
for k in config['PROFILERS']:
    if int(config['PROFILERS'][k]) == 1:
        methods.append(k)

if 'humann2' in methods:
    success_condition = ["tax_profile.SUCCESS","pathway_profile.SUCCESS"]
else:
    success_condition = ["tax_profile.SUCCESS"]

        
########### tools & DBs: ########
## Default tools
FAMAS           = config['TOOLS']['FAMAS']
DECONT          = config['TOOLS']['DECONT']
BWA             = config['TOOLS']['BWA']
METAPHLAN2_PATH      = config['TOOLS']['METAPHLAN2_PATH']
METAPHLAN       = config['TOOLS']['METAPHLAN']
HUMANN2_PATH    = config['TOOLS']['HUMANN2_PATH']
DIAMOND_PATH    = config['TOOLS']['DIAMOND_PATH']

## Default databases
DECONT_GENOME    = config['DBS']['DECONT_GENOME'] 
METAPHLAN_BTDB	 = config['DBS']['METAPHLAN_BTDB'] 
METAPHLAN2_PKL	 = config['DBS']['METAPHLAN2_PKL'] 
METAPHLAN2_DB	 = config['DBS']['METAPHLAN2_DB'] 
KRAKEN_DB	 = config['DBS']['KRAKEN_DB'] 
HUMANN2_NUCLEOTIDE    = config['TOOLS']['HUMANN2_NUCLEOTIDE']
HUMANN2_PROTEIN    = config['TOOLS']['HUMANN2_PROTEIN']

#################################

rule final:
    input: success_condition

    
def get_dir_for_prefix(wildcards):
	return config['SAMPLES'][wildcards.prefix]
     

rule merge_fastq_r1:
    input: get_dir_for_prefix
    output:
     	temp("merged_fastqs/{prefix}_R1.fastq.gz")
    message: "Merging fastq (R1) per sample dir [{wildcards.prefix}]"
    threads: 1
    params: resource="h_rt=4:00:00,mem_free=5G -q ionode.q"
    shell:
        "cat `ls {input}/*R1*gz | sort` > {output}"

rule merge_fastq_r2:
    input: get_dir_for_prefix
    output:
     	temp("merged_fastqs/{prefix}_R2.fastq.gz")
    message: "Merging fastq (R2) per sample dir [{wildcards.prefix}]"
    threads: 1
    params: resource="h_rt=4:00:00,mem_free=5G -q ionode.q"
    shell:
        "cat `ls {input}/*R2*gz | sort` > {output}"

rule trimming:
    input:
        r1="merged_fastqs/{prefix}_R1.fastq.gz",
        r2="merged_fastqs/{prefix}_R2.fastq.gz"
    output:
        r1=temp("trimmed_fastqs/{prefix}.trimmed.R1.fastq.gz"),
        r2=temp("trimmed_fastqs/{prefix}.trimmed.R2.fastq.gz")
    threads: 1
    params: resource="h_rt=48:00:00,mem_free=10G"
    message: "Trimming fastq files [{wildcards.prefix}]"
    shell: "{FAMAS} -i {input.r1} -j  {input.r2} -o {output.r1} -p {output.r2} --no-order-check"

rule decont:
    input:
        r1="trimmed_fastqs/{prefix}.trimmed.R1.fastq.gz",
        r2="trimmed_fastqs/{prefix}.trimmed.R2.fastq.gz"
    output:
        r1="decont_fastqs/{prefix}.trimmed.decont_1.fastq.gz",
        r2="decont_fastqs/{prefix}.trimmed.decont_2.fastq.gz",
        bam="decont_fastqs/{prefix}.trimmed.decont.bam"
    message: "Running decont on [{wildcards.prefix}]"
    threads: 8
    params: resource="h_rt=48:00:00,mem_free=15G"
    shell:
        "{DECONT} -i {input.r1} {input.r2} "
        "  -t {threads} " 
        "  -r {DECONT_GENOME} "
        "  -o decont_fastqs/{wildcards.prefix}.trimmed.decont "
        "  -b {BWA} "

rule kraken:
    input:
        r1="decont_fastqs/{prefix}.trimmed.decont_1.fastq.gz",
        r2="decont_fastqs/{prefix}.trimmed.decont_2.fastq.gz"
    output:
        tsv="kraken_profile/{prefix}.trimmed.decont.kraken.tsv",
        map="kraken_profile/{prefix}.trimmed.decont.kraken.map.gz",
        out="kraken_profile/{prefix}.trimmed.decont.kraken.out.gz"
    message: "Running Kraken [{wildcards.prefix}]"
    threads: 8
    params: resource="h_rt=48:00:00,mem_free=20G"
    shell:
        "kraken "
        "  --preload "
        "  --db {KRAKEN_DB} "
        "  --paired "      
        "  --threads {threads} "
        "  {input.r1} {input.r2} "
        "  > kraken_profile/{wildcards.prefix}.trimmed.decont.kraken.out; "   
        "kraken-translate --db {KRAKEN_DB} "
        "  --mpa-format "
        "  kraken_profile/{wildcards.prefix}.trimmed.decont.kraken.out "
        "  > kraken_profile/{wildcards.prefix}.trimmed.decont.kraken.map; "
        "kraken-mpa-report --db {KRAKEN_DB} "
        "  kraken_profile/{wildcards.prefix}.trimmed.decont.kraken.out "
        "  > {output.tsv};  "
        "gzip kraken_profile/{wildcards.prefix}.trimmed.decont.kraken.out"
        "     kraken_profile/{wildcards.prefix}.trimmed.decont.kraken.map"
        
rule metaphlan:
    input:
        r1="decont_fastqs/{prefix}.trimmed.decont_1.fastq.gz",
        r2="decont_fastqs/{prefix}.trimmed.decont_2.fastq.gz"
    output:
        tsv="metaphlan_profile/{prefix}.trimmed.decont.metaphlan.tsv",
        map="metaphlan_profile/{prefix}.trimmed.decont.metaphlan.map.gz",
        bt2="metaphlan_profile/{prefix}.trimmed.decont.bt2.txt.gz"
    message: "Running Metaphlan [{wildcards.prefix}]"
    threads: 8
    params: resource="h_rt=48:00:00,mem_free=10G"
    shell:
        "zcat {input.r1} {input.r2} | "
        "  {METAPHLAN} "
        "  --input_type multifastq "
        "  --nproc {threads} "                                                        
        "  --bowtie2db {METAPHLAN_BTDB} "
        "  --bowtie2out metaphlan_profile/{wildcards.prefix}.trimmed.decont.bt2.txt"
        "  -o {output.tsv};  "
        "{METAPHLAN} metaphlan_profile/{wildcards.prefix}.trimmed.decont.bt2.txt "
        "  --input_type bowtie2out "
        "  --nproc 2 "                                                               
        "  -t reads_map "                                                            
        "  -o metaphlan_profile/{wildcards.prefix}.trimmed.decont.metaphlan.map; "
        "gzip metaphlan_profile/{wildcards.prefix}.trimmed.decont.metaphlan.map"
        "     metaphlan_profile/{wildcards.prefix}.trimmed.decont.bt2.txt "

rule metaphlan2:
    input:
        r1="decont_fastqs/{prefix}.trimmed.decont_1.fastq.gz",
        r2="decont_fastqs/{prefix}.trimmed.decont_2.fastq.gz"
    output:
        tsv="metaphlan2_profile/{prefix}.trimmed.decont.metaphlan2.tsv"
    message: "Running Metaphlan [{wildcards.prefix}]"
    threads: 8
    params: resource="h_rt=48:00:00,mem_free=10G"
    shell:
        "{METAPHLAN2_PATH}/metaphlan2.py {input.r1},{input.r2} "
        " --mpa_pkl {METAPHLAN2_PKL} "
        " --bowtie2db {METAPHLAN2_DB} "
        " --bowtie2out metaphlan2_profile/{wildcards.prefix}.trimmed.decont.metaphlan2.bz2 "
        " -s metaphlan2_profile/{wildcards.prefix}.trimmed.decont.metaphlan2.sam.bz2 "
        " --nproc {threads} "
        " --input_type multifastq "
        " > {output.tsv} "

rule humann2:
    input:
        r1="decont_fastqs/{prefix}.trimmed.decont_1.fastq.gz",
        r2="decont_fastqs/{prefix}.trimmed.decont_2.fastq.gz"
    output:
        gf="humann2_profile/{prefix}.trimmed.decont.humann2_genefamilies.tsv",
        gfn="humann2_profile/{prefix}.trimmed.decont.humann2_genefamilies.relab.tsv",
        pw="humann2_profile/{prefix}.trimmed.decont.humann2_pathabundance.tsv",
        pwn="humann2_profile/{prefix}.trimmed.decont.humann2_pathabundance.relab.tsv",
        cov="humann2_profile/{prefix}.trimmed.decont.humann2_pathcoverage.tsv",
        flag="humann2_profile/{prefix}.trimmed.decont.humann2.SUCCESS"
    message: "Running HUMAnN2 [{wildcards.prefix}]"
    threads: 8
    params: resource="h_rt=48:00:00,mem_free=50G"
    shell:
        "{HUMANN2_PATH}/humann2 -i {input.r1},{input.r2}"
        " -o humann2_profile "
        " --metaphlan {METAPHLAN2_PATH} "
        " --diamond {DIAMOND_PATH}"
        " --input-format fastq.multi"
        " --output-basename {wildcards.prefix}.trimmed.decont.humann2"
        " --remove-temp-output"
        " --nucleotide-database {HUMANN2_NUCLEOTIDE}"
        " --protein-database {HUMANN2_PROTEIN}"
        " --threads 8;"
        "{HUMANN2_PATH}/humann2_renorm_table --input {output.gf}"
        " --output {output.gfn}"
        " --units relab;"
        "{HUMANN2_PATH}/humann2_renorm_table --input {output.pw}"
        " --output {output.pwn}"
        " --units relab;"
        "touch {output.flag}"

rule merge_humann2:
    input:
        expand("humann2_profile/{prefix}.trimmed.decont.humann2.SUCCESS",
                prefix=[k for k in config['SAMPLES']])
    output:
        gf="merged_table_humann2/genefamily.tsv",
        pw="merged_table_humann2/pathabundance.tsv",
        cov="merged_table_humann2/pathcoverage.tsv",
        flag="pathway_profile.SUCCESS"
    message: "Merging HUMAnN2"
    threads: 1
    params: resource="h_rt=48:00:00,mem_free=40G"
    shell:
         "{HUMANN2_PATH}humann2_join_tables --input humann2_profile "
         " --output {output.gf}"
         " --file_name genefamilies.relab;"
         "{HUMANN2_PATH}humann2_join_tables --input humann2_profile "
         " --output {output.pw}"
         " --file_name pathabundance.relab;"
         "{HUMANN2_PATH}humann2_join_tables --input humann2_profile "
         " --output {output.cov}"
         " --file_name pathcoverage;"
         "touch {output.flag}"
    
rule split_tables:
    input:
        "{method}_profile/{prefix}.trimmed.decont.{method}.tsv"
    output:
        ##dynamic("split_table_{method}/{prefix}.trimmed.decont.{method}.{tax}")
        "split_table_{method}/{prefix}.trimmed.decont.{method}.SUCCESS"
    message: "Splitting tables ({wildcards.method}) [{wildcards.prefix}]"
    threads: 1
    params: resource="h_rt=2:00:00,mem_free=5G"
    shell:
        "~lich/scripts/split_metaphlan_table.sh {input} split_table_{wildcards.method}/{wildcards.prefix}.trimmed.decont.{wildcards.method} && "
        "touch {output}"

rule merge_tables:
    input:
        expand("split_table_{method}/{prefix}.trimmed.decont.{method}.SUCCESS",
               method=methods, prefix=[k for k in config['SAMPLES']])
    output:
        touch("tax_profile.SUCCESS")
    message: "Merging tables"
    threads: 1
    params: resource="h_rt=2:00:00,mem_free=20G"
    run:
        for m in methods:
                IDS = glob.glob("split_table_"+m+"/*.table.?")
                tax = set([x.split(".")[-1] for x in IDS ])
                output_dir = "merged_table_" + m + "/"
                if not os.path.exists(output_dir):
                        os.mkdir(output_dir)
                for t in tax:
                        shell("~lich/scripts/misc-scripts/merge_tables.py -p '[A-Z]+[0-9]+' split_table_%s/*table.%s -o %s/%s.%s.profile_merged.tsv" %(m, t, output_dir, t, m))


